{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./ratings.service\";\nimport * as i2 from \"../users/users.service\";\nimport * as i3 from \"../reviews/reviews.service\";\nimport * as i4 from \"../base-table/base.table.component\";\nconst _c0 = [\"baseTable\"];\nexport let RatingsComponent = /*#__PURE__*/(() => {\n  class RatingsComponent {\n    constructor(ratingsService, usersService, reviewsService) {\n      this.ratingsService = ratingsService;\n      this.usersService = usersService;\n      this.reviewsService = reviewsService;\n      this.querys = [{\n        namespace: 'gets',\n        method: 'GET',\n        success: data => this.baseTable.injectData(data)\n      }, {\n        namespace: 'add',\n        method: 'POST',\n        success: data => this.baseTable.injectOneData(data),\n        error: e => this.baseTable.injectErrorAdd(e)\n      }, {\n        namespace: 'edit',\n        method: 'POST',\n        success: data => this.baseTable.patchData(data),\n        error: e => this.baseTable.filterError(e)\n      }, {\n        namespace: 'remove',\n        method: 'POST',\n        success: data => this.baseTable.patchData(data),\n        error: e => this.baseTable.filterError(e)\n      }, {\n        namespace: 'delete',\n        method: 'POST',\n        success: data => this.baseTable.filterData(data),\n        error: e => this.baseTable.filterError(e)\n      }];\n      this.fields = [{\n        name: \"id\",\n        title: \"id\",\n        width: 5\n      }, {\n        name: \"user\",\n        title: \"user\",\n        width: 25,\n        viewFn: entry => {\n          let datas = [];\n          if (entry.user) datas.push(entry.user);\n          if (entry.social_id) datas.push(entry.social_id);\n          return datas.join('/');\n        },\n        editTitle: 'user',\n        editType: 'select',\n        formControlName: 'userId',\n        editFn: data => {\n          return data.id;\n        },\n        editReceiveFn: () => {\n          return new Promise((res, rej) => {\n            let obs = this.usersService.source('short-user-gets', 'GET').subscribe(data => {\n              obs.unsubscribe();\n              res(data.map(entry => {\n                let datas = [];\n                if (entry.user) datas.push(entry.user);\n                if (entry.social_id) datas.push(entry.social_id);\n                datas = datas.join('/');\n                return {\n                  value: entry.id,\n                  title: datas\n                };\n              }));\n            });\n            this.usersService.get('short-user-gets');\n          });\n        }\n      }, {\n        name: \"review\",\n        title: \"review(title)\",\n        width: 25,\n        viewFn: data => {\n          return 'id:' + data.id + '->' + data.groupTitle.group.group + '/' + data.groupTitle.title.title;\n        },\n        editTitle: 'review',\n        editType: 'select',\n        formControlName: 'reviewId',\n        editFn: data => {\n          return data.id;\n        },\n        editReceiveFn: () => {\n          return new Promise((res, rej) => {\n            let obs = this.reviewsService.source('short-gets', 'GET').subscribe(data => {\n              obs.unsubscribe();\n              res(data.map(entry => {\n                return {\n                  value: entry.id,\n                  title: 'id:' + entry.id + '->' + entry.groupTitle.group.group + '/' + entry.groupTitle.title.title\n                };\n              }));\n            });\n            this.reviewsService.get('short-gets');\n          });\n        }\n      }, {\n        name: \"userRating\",\n        title: \"user rating\",\n        width: 20,\n        editTitle: 'rating',\n        editType: 'select',\n        formControlName: 'rating',\n        editReceiveFn: () => {\n          return new Promise((res, rej) => {\n            res([1, 2, 3, 4, 5].map(item => {\n              return {\n                value: item,\n                title: item\n              };\n            }));\n          });\n        }\n      }];\n      this.service = this.ratingsService;\n    }\n\n    ngAfterViewInit() {\n      this.baseTable.refreshSettings();\n    }\n\n  }\n\n  RatingsComponent.ɵfac = function RatingsComponent_Factory(t) {\n    return new (t || RatingsComponent)(i0.ɵɵdirectiveInject(i1.RatingsService), i0.ɵɵdirectiveInject(i2.UsersService), i0.ɵɵdirectiveInject(i3.ReviewsService));\n  };\n\n  RatingsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RatingsComponent,\n    selectors: [[\"ratings\"]],\n    viewQuery: function RatingsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.baseTable = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 6,\n    consts: [[3, \"fields\", \"querys\", \"service\", \"isEdit\", \"isCreate\", \"isMore\"], [\"baseTable\", \"\"]],\n    template: function RatingsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"base-table\", 0, 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"fields\", ctx.fields)(\"querys\", ctx.querys)(\"service\", ctx.service)(\"isEdit\", true)(\"isCreate\", true)(\"isMore\", true);\n      }\n    },\n    directives: [i4.BaseTableComponent],\n    encapsulation: 2\n  });\n  return RatingsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}