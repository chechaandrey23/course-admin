{"ast":null,"code":"import _asyncToGenerator from \"/home/chechaandrey/Projects/itransition/course/admin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nexport class FetchServiceError extends Error {}\nexport class FetchService {\n  constructor(http) {\n    this.http = http;\n    this.storage = {};\n\n    if (!(this.http instanceof HttpClient)) {\n      throw new FetchServiceError('An instance of the \"HttpClient\" class must be passed to the constructor');\n    }\n  }\n\n  get(namespace, options = {}) {\n    return this.fetch(namespace, 'GET', null, options);\n  }\n\n  post(namespace, data = null, options = {}) {\n    return this.fetch(namespace, 'POST', data, options);\n  }\n\n  fetch(namespace, method, data, options) {\n    namespace += method;\n\n    if (!this.storage.hasOwnProperty(namespace)) {\n      throw new FetchServiceError(`The entity for \"${namespace}\"(${method}) is not defined`);\n    }\n\n    let entry = this.storage[namespace];\n\n    if (entry.query) {\n      entry.query.unsubscribe();\n      entry.query = null;\n    }\n\n    let query;\n\n    if (method === 'GET') {\n      query = this.http.get(entry.url, Object.assign({}, entry.options, options));\n    } else {\n      query = this.http.post(entry.url, data, Object.assign({}, entry.options, options));\n    }\n\n    entry.query = query.pipe(catchError(e => {\n      entry.query.unsubscribe();\n      entry.query = null;\n      this.pushError(namespace, e);\n      return of(null);\n    })).subscribe(data => {\n      this.push(namespace, data);\n    });\n    return this;\n  } // Observable\n\n\n  source(namespace, method = \"GET\") {\n    namespace += method;\n\n    if (!this.storage.hasOwnProperty(namespace)) {\n      throw new FetchServiceError(`The entity for \"${namespace}\" is not defined`);\n    }\n\n    let entry = this.storage[namespace];\n    return new Observable(observer => {\n      let f = data => {\n        observer.next(data); // call-back .subscribe\n      };\n\n      entry.cbs.push(f);\n      return {\n        unsubscribe: () => {\n          entry.cbs = entry.cbs.filter(fn => {\n            return fn !== f;\n          });\n        }\n      };\n    });\n  }\n\n  error(namespace, method = \"GET\") {\n    namespace += method;\n\n    if (!this.storage.hasOwnProperty(namespace)) {\n      throw new FetchServiceError(`The entity in Error for \"${namespace}\" is not defined`);\n    }\n\n    let entry = this.storage[namespace];\n    return new Observable(observer => {\n      let f = data => {\n        observer.next(data); // call-back .subscribe\n      };\n\n      entry.ecbs.push(f);\n      return {\n        unsubscribe: () => {\n          entry.ecbs = entry.ecbs.filter(fn => {\n            return fn !== f;\n          });\n        }\n      };\n    });\n  }\n\n  push(namespace, data) {\n    let entry = this.storage[namespace];\n    entry.middleware.call(this, data).then(data => {\n      this.storage[namespace].cbs.map(f => {\n        f.call(null, data);\n      });\n    }).catch(e => {\n      throw e;\n    });\n    return this;\n  }\n\n  pushError(namespace, data) {\n    this.storage[namespace].ecbs.map(f => {\n      f.call(null, data);\n    });\n  }\n\n  addEntry(namespace, method, url, middleware = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (a) {\n      return a;\n    });\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), options = {}) {\n    this.storage[namespace + method] = {\n      cbs: [],\n      ecbs: [],\n      url,\n      options,\n      middleware,\n      query: null\n    };\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/home/chechaandrey/Projects/itransition/course/admin/src/app/fetch-service/fetch.service.ts"],"names":["HttpClient","Observable","of","catchError","FetchServiceError","Error","FetchService","constructor","http","storage","get","namespace","options","fetch","post","data","method","hasOwnProperty","entry","query","unsubscribe","url","Object","assign","pipe","e","pushError","subscribe","push","source","observer","f","next","cbs","filter","fn","error","ecbs","middleware","call","then","map","catch","addEntry","a"],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nexport class FetchServiceError extends Error {\n}\nexport class FetchService {\n    constructor(http) {\n        this.http = http;\n        this.storage = {};\n        if (!(this.http instanceof HttpClient)) {\n            throw new FetchServiceError('An instance of the \"HttpClient\" class must be passed to the constructor');\n        }\n    }\n    get(namespace, options = {}) {\n        return this.fetch(namespace, 'GET', null, options);\n    }\n    post(namespace, data = null, options = {}) {\n        return this.fetch(namespace, 'POST', data, options);\n    }\n    fetch(namespace, method, data, options) {\n        namespace += method;\n        if (!this.storage.hasOwnProperty(namespace)) {\n            throw new FetchServiceError(`The entity for \"${namespace}\"(${method}) is not defined`);\n        }\n        let entry = this.storage[namespace];\n        if (entry.query) {\n            entry.query.unsubscribe();\n            entry.query = null;\n        }\n        let query;\n        if (method === 'GET') {\n            query = this.http.get(entry.url, Object.assign({}, entry.options, options));\n        }\n        else {\n            query = this.http.post(entry.url, data, Object.assign({}, entry.options, options));\n        }\n        entry.query = query.pipe(catchError((e) => {\n            entry.query.unsubscribe();\n            entry.query = null;\n            this.pushError(namespace, e);\n            return of(null);\n        })).subscribe((data) => { this.push(namespace, data); });\n        return this;\n    }\n    // Observable\n    source(namespace, method = \"GET\") {\n        namespace += method;\n        if (!this.storage.hasOwnProperty(namespace)) {\n            throw new FetchServiceError(`The entity for \"${namespace}\" is not defined`);\n        }\n        let entry = this.storage[namespace];\n        return new Observable((observer) => {\n            let f = (data) => {\n                observer.next(data); // call-back .subscribe\n            };\n            entry.cbs.push(f);\n            return {\n                unsubscribe: () => {\n                    entry.cbs = entry.cbs.filter((fn) => {\n                        return fn !== f;\n                    });\n                }\n            };\n        });\n    }\n    error(namespace, method = \"GET\") {\n        namespace += method;\n        if (!this.storage.hasOwnProperty(namespace)) {\n            throw new FetchServiceError(`The entity in Error for \"${namespace}\" is not defined`);\n        }\n        let entry = this.storage[namespace];\n        return new Observable((observer) => {\n            let f = (data) => {\n                observer.next(data); // call-back .subscribe\n            };\n            entry.ecbs.push(f);\n            return {\n                unsubscribe: () => {\n                    entry.ecbs = entry.ecbs.filter((fn) => {\n                        return fn !== f;\n                    });\n                }\n            };\n        });\n    }\n    push(namespace, data) {\n        let entry = this.storage[namespace];\n        entry.middleware.call(this, data).then((data) => {\n            this.storage[namespace].cbs.map((f) => {\n                f.call(null, data);\n            });\n        }).catch((e) => {\n            throw e;\n        });\n        return this;\n    }\n    pushError(namespace, data) {\n        this.storage[namespace].ecbs.map((f) => {\n            f.call(null, data);\n        });\n    }\n    addEntry(namespace, method, url, middleware = async (a) => { return a; }, options = {}) {\n        this.storage[namespace + method] = { cbs: [], ecbs: [], url, options, middleware, query: null };\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}