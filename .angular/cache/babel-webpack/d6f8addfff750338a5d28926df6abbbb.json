{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./reviews.service\";\nimport * as i2 from \"../users/users.service\";\nimport * as i3 from \"../groups/groups.service\";\nimport * as i4 from \"../titles/titles.service\";\nimport * as i5 from \"../tags/tags.service\";\nimport * as i6 from \"../base-table/base.table.component\";\nconst _c0 = [\"baseTable\"];\nexport let ReviewsComponent = /*#__PURE__*/(() => {\n  class ReviewsComponent {\n    constructor(reviewsService, usersService, groupsService, titlesService, tagsService) {\n      this.reviewsService = reviewsService;\n      this.usersService = usersService;\n      this.groupsService = groupsService;\n      this.titlesService = titlesService;\n      this.tagsService = tagsService;\n      this.querys = [{\n        namespace: 'gets',\n        method: 'GET',\n        success: data => this.baseTable.injectData(data)\n      }, {\n        namespace: 'add',\n        method: 'POST',\n        success: data => this.baseTable.injectOneData(data),\n        error: e => this.baseTable.injectErrorAdd(e)\n      }, {\n        namespace: 'edit',\n        method: 'POST',\n        success: data => this.baseTable.patchData(data),\n        error: e => this.baseTable.filterError(e)\n      }, {\n        namespace: 'remove',\n        method: 'POST',\n        success: data => this.baseTable.patchData(data),\n        error: e => this.baseTable.filterError(e)\n      }, {\n        namespace: 'delete',\n        method: 'POST',\n        success: data => this.baseTable.filterData(data),\n        error: e => this.baseTable.filterError(e)\n      }];\n      this.fields = [{\n        name: \"id\",\n        title: \"id\",\n        width: 5\n      }, {\n        name: \"groupTitle\",\n        title: \"title\",\n        width: 10,\n        viewFn: data => {\n          return data.group.group + '/' + data.title.title;\n        }\n      }, //{name: \"title\", title: \"title\", width: 5, editTitle: 'title', editType: 'input', formControlName: 'title', editRequire: true},\n      {\n        name: \"description\",\n        title: \"description\",\n        width: 15,\n        editTitle: 'Description',\n        editType: 'textarea',\n        formControlName: 'description',\n        editRequire: true,\n        viewFn: data => {\n          return data.substring(0, 100);\n        }\n      }, //{name: \"text\", title: \"text\", width: 5, editTitle: 'text review', editType: 'textarea', formControlName: 'text', editRequire: true, viewFn: (data: any) => {return data.substring(0, 255)}},\n      {\n        name: \"authorRating\",\n        title: \"AR\",\n        width: 5,\n        editTitle: 'Author Rating',\n        editType: 'select',\n        formControlName: 'authorRating',\n        editRequire: true,\n        editReceiveFn: () => {\n          return new Promise((res, rej) => {\n            res([1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(item => {\n              return {\n                value: item,\n                title: item\n              };\n            }));\n          });\n        }\n      }, {\n        name: \"averageEditorRating\",\n        title: \"AER\",\n        width: 5\n      }, {\n        name: \"averageUserRating\",\n        title: \"AUR\",\n        width: 5\n      }, {\n        name: \"user\",\n        title: \"user\",\n        width: 10,\n        viewFn: entry => {\n          let datas = [];\n          if (entry.user) datas.push(entry.user);\n          if (entry.social_id) datas.push(entry.social_id);\n          return datas.join('/');\n        },\n        editTitle: 'author content',\n        editType: 'select',\n        formControlName: 'userId',\n        editFn: data => {\n          return data.id;\n        },\n        editReceiveFn: () => {\n          return new Promise((res, rej) => {\n            let obs = this.usersService.source('short-editor-gets', 'GET').subscribe(data => {\n              obs.unsubscribe();\n              res(data.map(entry => {\n                let datas = [];\n                if (entry.user) datas.push(entry.user);\n                if (entry.social_id) datas.push(entry.social_id);\n                datas = datas.join('/');\n                return {\n                  value: entry.id,\n                  title: datas\n                };\n              }));\n            });\n            this.usersService.get('short-editor-gets');\n          });\n        }\n      }, {\n        name: \"groupTitle\",\n        title: \"G\",\n        width: 5,\n        viewFn: data => {\n          return data.group.group;\n        },\n        editTitle: 'group',\n        editType: 'select',\n        formControlName: 'groupId',\n        editFn: data => {\n          return data.group.id;\n        },\n        editReceiveFn: () => {\n          return new Promise((res, rej) => {\n            let obs = this.groupsService.source('short-gets', 'GET').subscribe(data => {\n              obs.unsubscribe();\n              res(data.map(entry => {\n                return {\n                  value: entry.id,\n                  title: entry.group\n                };\n              }));\n            });\n            this.groupsService.get('short-gets');\n          });\n        }\n      }, {\n        name: \"groupTitle\",\n        title: \"T\",\n        width: 5,\n        viewFn: data => {\n          return data.title.title;\n        },\n        editTitle: 'title',\n        editType: 'select',\n        formControlName: 'titleId',\n        editFn: data => {\n          return data.title.id;\n        },\n        editReceiveFn: () => {\n          return new Promise((res, rej) => {\n            let obs = this.titlesService.source('short-gets', 'GET').subscribe(data => {\n              obs.unsubscribe();\n              res(data.map(entry => {\n                return {\n                  value: entry.id,\n                  title: entry.title\n                };\n              }));\n            });\n            this.titlesService.get('short-gets');\n          });\n        }\n      }, {\n        name: \"draft\",\n        title: \"draft\",\n        width: 5,\n        editTitle: 'is draft',\n        editType: 'checkbox',\n        formControlName: 'draft'\n      }, {\n        name: \"tags\",\n        title: \"tags\",\n        width: 5,\n        editTitle: 'tags',\n        editType: 'multi-select',\n        formControlName: 'tags',\n        viewFn: data => {\n          return data.map(item => item.tag).join(', ');\n        },\n        editFn: data => {\n          return data.map(item => item.id);\n        },\n        editReceiveFn: () => {\n          return new Promise((res, rej) => {\n            let obs = this.tagsService.source('short-gets', 'GET').subscribe(data => {\n              obs.unsubscribe();\n              res(data.map(entry => {\n                return {\n                  value: entry.id,\n                  title: entry.tag\n                };\n              }));\n            });\n            this.tagsService.get('short-gets');\n          });\n        }\n      }];\n      this.service = this.reviewsService;\n    }\n\n    ngAfterViewInit() {\n      this.baseTable.refreshSettings();\n    }\n\n  }\n\n  ReviewsComponent.ɵfac = function ReviewsComponent_Factory(t) {\n    return new (t || ReviewsComponent)(i0.ɵɵdirectiveInject(i1.ReviewsService), i0.ɵɵdirectiveInject(i2.UsersService), i0.ɵɵdirectiveInject(i3.GroupsService), i0.ɵɵdirectiveInject(i4.TitlesService), i0.ɵɵdirectiveInject(i5.TagsService));\n  };\n\n  ReviewsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ReviewsComponent,\n    selectors: [[\"reviews\"]],\n    viewQuery: function ReviewsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.baseTable = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 6,\n    consts: [[3, \"fields\", \"querys\", \"service\", \"isEdit\", \"isCreate\", \"isMore\"], [\"baseTable\", \"\"]],\n    template: function ReviewsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"base-table\", 0, 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"fields\", ctx.fields)(\"querys\", ctx.querys)(\"service\", ctx.service)(\"isEdit\", true)(\"isCreate\", true)(\"isMore\", true);\n      }\n    },\n    directives: [i6.BaseTableComponent],\n    encapsulation: 2\n  });\n  return ReviewsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}